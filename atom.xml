<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zacharyzekaichen.github.io</id>
    <title>Zachary&apos;s Home</title>
    <updated>2020-12-20T03:12:10.522Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zacharyzekaichen.github.io"/>
    <link rel="self" href="https://zacharyzekaichen.github.io/atom.xml"/>
    <subtitle>Growth</subtitle>
    <logo>https://zacharyzekaichen.github.io/images/avatar.png</logo>
    <icon>https://zacharyzekaichen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Zachary&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[Leetcode归类与索引]]></title>
        <id>https://zacharyzekaichen.github.io/mrbQkv9g7/</id>
        <link href="https://zacharyzekaichen.github.io/mrbQkv9g7/">
        </link>
        <updated>2020-12-17T04:39:17.000Z</updated>
        <content type="html"><![CDATA[<hr>
<h3 id="数组">数组</h3>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
<p><a href="https://leetcode-cn.com/problems/rotate-image/">Q48. 旋转图像</a></p>
<p><a href="https://leetcode-cn.com/problems/spiral-matrix/">Q54. 螺旋矩阵</a></p>
<hr>
<h3 id="贪心算法">贪心算法</h3>
<p><a href="https://leetcode-cn.com/problems/integer-to-roman/">Q5</a></p>
<h4 id="q55-跳跃游戏">Q55. 跳跃游戏</h4>
<p><a href="https://leetcode-cn.com/problems/jump-game/">LeetCode链接</a></p>
<p>给定一个<strong>非负整数</strong>数组，你最初位于数组的第一个位置。<br>
数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>
判断你是否能够到达最后一个位置。</p>
<p>示例 1:<br>
输入: [2,3,1,1,4]<br>
输出: true<br>
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</p>
<p>示例 2:<br>
输入: [3,2,1,0,4]<br>
输出: false<br>
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</p>
<hr>
<h3 id="二分法">二分法</h3>
<p>结论：有序查找中特别管用，问题是你得判断出这是一种“有序查找”问题，比如Q69平方根问题；Q29、Q50可以算作一道题，采用了二分的思想，但不算是“有序查找”问题。二分的思想简单来讲可以理解为折叠的思想，典型题目是Q50快速幂算法。</p>
<p><a href="https://leetcode-cn.com/problems/divide-two-integers/">Q29 两数相除</a></p>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="int类型溢出相关问题">int类型溢出相关问题</h3>
<p><a href="https://leetcode-cn.com/problems/divide-two-integers/">Q29 两数相除</a></p>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="快速幂算法">快速幂算法</h3>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<hr>
<h3 id="牛顿法">牛顿法</h3>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="动态规划">动态规划</h3>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
<hr>
<h3 id="分治">分治</h3>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Servlet-Notes]]></title>
        <id>https://zacharyzekaichen.github.io/servlet-notes/</id>
        <link href="https://zacharyzekaichen.github.io/servlet-notes/">
        </link>
        <updated>2020-12-02T14:43:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">/**
 * service方法专门用来处理请求和响应。
 * Servlet接口实现
 */
@Override
public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
	System.out.println(&quot;Hello Servlet 被访问了。&quot;);
}        

//分发处理
//向下转型从而能使用getMethod方法
HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;
//获取方法String
String method = httpServletRequest.getMethod();
//分发操作
if(&quot;GET&quot;.equals(method)){
	System.out.println(method);
}else if(&quot;POST&quot;.equals(method)){
	System.out.println(method);
}

//通过继承方式实现Servlet程序
//throws异常没加进去
public class HelloServlet implements HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp){
		super.doGet(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp){
		super.doPost(req, resp);
	}
}

//获取ServletConfig对象
getServletConfig()
//获取ServletContext对象
ServletContext servletContext= getServletConfig().getServletContext();
//获取context-parameter
servletContext.getInitParameter(&quot;username&quot;);
//获取当前工程路径
servletContext.getContextPath();
//获取当前工程物理上的绝对路径
servletContext.getRealPath(&quot;/&quot;);

//HttpServletRequest类对象的常用方法
//HttpServletRequest req
//获取请求的统一资源路径
req.getRequestURI();
//获取请求的统一资源定位符
req.getRequestURL();
//获取客户端IP
req.getRemoteHost();
//获取请求头
req.getHeader(String key);
//获取参数
req.getParameter(String name);
req.getParameterValues(String name);
//设置字符集，注意这个设置要在最开始的地方使用
req.setCharacterEncoding(&quot;UTF-8&quot;);
</code></pre>
<p><strong>请求转发的操作流程</strong></p>
<pre><code class="language-java">//对于Servlet1而言
String username = req.getParameter(&quot;username&quot;);
username.sout;
//设置域参数
request.setAttribute(&quot;key1&quot;,&quot;value1&quot;);
//获取转发路径并转发
RequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/contextServlet2&quot;);
requestDispatcher.forward(request,response);
//对于Servlet2而言
//便可以获得request和response的信息，同时也可以获得域参数的信息。
</code></pre>
<p><strong>往客户端回传数据</strong></p>
<pre><code class="language-java">//会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头。
//此方法需要在获取流之前使用。
response.setContentType(&quot;text/html; charset=UTF-8&quot;);
//获取流
PrintWriter print = response.getWriter();
writer.write(&quot;response content.&quot;);
</code></pre>
<p><strong>请求重定向方法</strong></p>
<pre><code class="language-java">//第一种方法
response.setStatus(302);
response.setHeader(&quot;Location&quot;, &quot;http://localhost:8080&quot;);
//第二种方法（推荐使用）
response.sendRedirect(&quot;http://localhost:8080&quot;)；
</code></pre>
<p><strong>ServletContext类对象的域数据</strong></p>
<pre><code class="language-java">//对于Servlet1而言
ServletContext servletContext = getServletContext();
servletContext.setAttribute(key:&quot;username&quot;, value:&quot;czk&quot;);
String v1 = servletContext.getAttribute(&quot;username&quot;); //&quot;czk&quot;
//对于Servlet2而言
ServletContext servletContext = getServletContext();
String v2 = servletContext.getAttribute(&quot;username&quot;); //&quot;czk&quot;
</code></pre>
<p><strong>HttpServletRequest类对象的域数据</strong><br>
<em>由实验结果可得，只有在一次请求之中，request中的域参数才是共享的，否则不共享。</em></p>
<pre><code class="language-java">//对于Servlet1而言
request.setAttribute(&quot;username&quot;, &quot;czk&quot;);
String v1 = request.getAttribute(&quot;username&quot;); //&quot;czk&quot;
//对于Servlet2而言
request.getAttribute(&quot;username&quot;); //null
</code></pre>
<hr>
<pre><code class="language-html">&lt;head&gt;
	&lt;base href=&quot;http://localhost:8080/01_web/a/b/&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;http://localhost:8080/01_web/hello&quot; method=&quot;get&quot;&gt;
        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br/&gt;
        密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br/&gt;
        兴趣爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;java&quot;&gt;Java&lt;br/&gt;
        &lt;input type=&quot;submit&quot;&gt;
        &lt;a href=&quot;a/b/c.html&quot;&gt;超链接&lt;/a&gt;
    &lt;/form&gt;
&lt;/body&gt;
</code></pre>
<hr>
<pre><code class="language-xml">&lt;!-- servlet标签给Tomcat服务器配置Servlet程序 --&gt;
&lt;servlet&gt;
	&lt;!-- 程序别名 --&gt;
	&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
	&lt;!-- 程序全类名 --&gt;
	&lt;servlet-class&gt;com.chenzk.learn.HelloServlet&lt;/servlet-class&gt;

	&lt;!-- 初始化参数 --&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;username&lt;/param-name&gt;
		&lt;param-value&gt;root&lt;/param-value&gt;
	&lt;/init-param&gt;
&lt;/servlet&gt;

&lt;!-- servlet-mapping标签给servlet程序配置访问地址 --&gt;
&lt;servlet-mapping&gt;
	&lt;!-- 作用：告诉服务器，我当前配置的地址给哪一个Servlet程序使用 --&gt;
	&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
	&lt;!--
    		/ 斜杠在服务器解析时，表示地址为 http://ip:port/工程路径 &lt;br/&gt;
    		/hello 表示地址为 http://ip:port/工程路径/hello        &lt;br/&gt;
 	--&gt;
	&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;    
</code></pre>
]]></content>
    </entry>
</feed>