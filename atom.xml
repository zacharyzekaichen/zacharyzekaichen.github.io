<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zacharyzekaichen.github.io</id>
    <title>Zachary&apos;s Home</title>
    <updated>2021-01-07T03:42:52.544Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zacharyzekaichen.github.io"/>
    <link rel="self" href="https://zacharyzekaichen.github.io/atom.xml"/>
    <subtitle>Growth</subtitle>
    <logo>https://zacharyzekaichen.github.io/images/avatar.png</logo>
    <icon>https://zacharyzekaichen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Zachary&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[Leetcode归类与索引]]></title>
        <id>https://zacharyzekaichen.github.io/mrbQkv9g7/</id>
        <link href="https://zacharyzekaichen.github.io/mrbQkv9g7/">
        </link>
        <updated>2020-12-17T04:39:17.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="链表">链表</h1>
<h2 id="双指针">双指针</h2>
<h3 id="链表节点按规则排列">链表节点按规则排列</h3>
<h5 id="q86-分隔链表">Q86. 分隔链表</h5>
<p><a href="https://leetcode-cn.com/problems/partition-list/">LeetCode链接</a></p>
<p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p>
<p>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:<br>
输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3<br>
输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p>
<p><strong>做题中出现的注意事项：</strong><br>
对于链表中的节点而言，它们是实打实的对象实体，而当我们建立节点对应的变量去遍历链表中的节点或指向链表中的某个节点的时候，这个变量充当的是“地址容器”的角色，也就是说，存放的是这个对象的地址，<mark>但是</mark>，当通过这个变量进行相关操作的时候，是对<mark>对象实体进行操作</mark>。因此，当我们用多个指针指向同一个对象实体的时候，当通过其中一个指针改变了节点内容的时候，意味着其他指针指向的对象实体（即该对象实体）发生了改变。</p>
<hr>
<h1 id="数组">数组</h1>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
<p><a href="https://leetcode-cn.com/problems/rotate-image/">Q48. 旋转图像</a></p>
<p><a href="https://leetcode-cn.com/problems/spiral-matrix/">Q54. 螺旋矩阵</a></p>
<h2 id="双指针-2">双指针</h2>
<hr>
<h3 id="滑动窗口">滑动窗口</h3>
<hr>
<h4 id="无重复">无重复</h4>
<h5 id="q3-无重复字符的最长子串">Q3. 无重复字符的最长子串</h5>
<p><a href="https://leetcode-cn.com/problems/merge-intervals/">LeetCode链接</a></p>
<p>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</p>
<p>示例 1:<br>
输入: s = &quot;abcabcbb&quot;<br>
输出: 3<br>
解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</p>
<p>示例 2:<br>
输入: s = &quot;bbbbb&quot;<br>
输出: 1<br>
解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</p>
<p>示例 3:<br>
输入: s = &quot;pwwkew&quot;<br>
输出: 3<br>
解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</p>
<p>示例 4:<br>
输入: s = &quot;&quot;<br>
输出: 0</p>
<hr>
<h4 id="重叠区间-合并区间-插入区间">重叠区间、合并区间、插入区间</h4>
<h5 id="q56-合并区间">Q56. 合并区间</h5>
<p><a href="https://leetcode-cn.com/problems/merge-intervals/">LeetCode链接</a></p>
<p>给出一个区间的集合，请合并所有重叠的区间。</p>
<p>示例 1:<br>
输入: intervals = [[1,3],[2,6],[8,10],[15,18]]<br>
输出: [[1,6],[8,10],[15,18]]<br>
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p>
<p>示例 2:<br>
输入: intervals = [[1,4],[4,5]]<br>
输出: [[1,5]]<br>
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</p>
<h5 id="q252-会议室">Q252. 会议室</h5>
<p><a href="">LeetCode链接</a></p>
<p>给定一个会议时间安排的数组 intervals ，每个会议时间都会包括开始和结束的时间 intervals[i] = [starti, endi] ，请你判断一个人是否能够参加这里面的全部会议。</p>
<p>示例 1:：<br>
输入: intervals = [[0,30],[5,10],[15,20]]<br>
输出: false<br>
解释: 存在重叠区间，一个人在同一时刻只能参加一个会议。</p>
<p>示例 2:：<br>
输入: intervals = [[7,10],[2,4]]<br>
输出: true<br>
解释: 不存在重叠区间。</p>
<h5 id="q57-插入区间">Q57. 插入区间</h5>
<p><a href="https://leetcode-cn.com/problems/insert-interval/">LeetCode链接</a></p>
<p>给出一个无重叠的 ，按照区间起始端点排序的区间列表。<br>
在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>
<p>示例 1：<br>
输入：intervals = [[1,3],[6,9]], newInterval = [2,5]<br>
输出：[[1,5],[6,9]]</p>
<p>示例 2：<br>
输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]<br>
输出：[[1,2],[3,10],[12,16]]<br>
解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。</p>
<hr>
<h3 id="贪心算法">贪心算法</h3>
<p><a href="https://leetcode-cn.com/problems/integer-to-roman/">Q5</a></p>
<h5 id="q55-跳跃游戏">Q55. 跳跃游戏</h5>
<p><a href="https://leetcode-cn.com/problems/jump-game/">LeetCode链接</a></p>
<p>给定一个<strong>非负整数</strong>数组，你最初位于数组的第一个位置。<br>
数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>
判断你是否能够到达最后一个位置。</p>
<p>示例 1:<br>
输入: [2,3,1,1,4]<br>
输出: true<br>
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</p>
<p>示例 2:<br>
输入: [3,2,1,0,4]<br>
输出: false<br>
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</p>
<hr>
<h2 id="回溯算法">回溯算法</h2>
<h4 id="排列">排列</h4>
<h5 id="46-全排列">46. 全排列</h5>
<p><a href="https://leetcode-cn.com/problems/permutations/">LeetCode链接</a></p>
<p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p>
<p>示例:<br>
输入: [1,2,3]<br>
输出:<br>
[<br>
[1,2,3],<br>
[1,3,2],<br>
[2,1,3],<br>
[2,3,1],<br>
[3,1,2],<br>
[3,2,1]<br>
]</p>
<details>
<summary>Answer</summary>
<pre><code> 
private void dfs(int[] nums, int len, int depth, List<Integer> path, boolean[] used, List<List<Integer>> res) {
  if (depth == len) {
  res.add(path);
  return;
  }
  for (int i = 0; i < len; i++) {
    if (!used[i]) {
      path.add(nums[i]);
      used[i] = true;
      dfs(nums, len, depth + 1, path, used, res);
      used[i] = false;
      path.remove(path.size() - 1);
    }
  }
</code></pre>
</details>
<h5 id="47-全排列ii">47. 全排列II</h5>
<p><a href="https://leetcode-cn.com/problems/permutations-ii/">LeetCode链接</a></p>
<p>给定一个<strong>可包含重复数字</strong>的序列 nums ，按任意顺序 返回所有不重复的全排列。</p>
<p>示例 1：<br>
输入：nums = [1,1,2]<br>
输出：<br>
[[1,1,2], [1,2,1], [2,1,1]]</p>
<details>
<summary>Answer</summary>
<pre><code> 
private void dfs(int[] nums, int len, int depth, List<Integer> path, boolean[] used, List<List<Integer>> res) {
  if (depth == len) {
  res.add(path);
  return;
  }
  for (int i = 0; i < len; i++) {
    if (!used[i]) {
      if (i > 0 && nums[i] == nums[i - 1] && !isUsed[i - 1]) continue;
      path.add(nums[i]);
      used[i] = true;
      dfs(nums, len, depth + 1, path, used, res);
      used[i] = false;
      path.remove(path.size() - 1);
    }
  }
</code></pre>
</details>
<h4 id="组合">组合</h4>
<p><strong>说明</strong>：<strong>组合</strong>的内涵在于，在数量为n的元素中，挑选出数量为k（k小于等于n）的元素形成一组，每组之间的元素组成是不相同的。即[1,2,3]和[1,3,2]视为相同的。这种问题的求解，一般需要引入<mark>startIndex</mark>避免出现重复的情况。引入<mark>startIndex</mark>的逻辑在于，将数量为n的元素组合每次缩减1，使得使用过的元素不再使用。</p>
<h5 id="q77-组合">Q77. 组合</h5>
<p><a href="https://leetcode-cn.com/problems/combinations/">LeetCode链接</a></p>
<p>给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。</p>
<p>示例:<br>
输入: n = 4, k = 2<br>
输出:<br>
[<br>
[2,4],<br>
[3,4],<br>
[2,3],<br>
[1,2],<br>
[1,3],<br>
[1,4],<br>
]</p>
<h5 id="q78-子集">Q78. 子集</h5>
<p><a href="https://leetcode-cn.com/problems/subsets/">LeetCode链接</a></p>
<p>给你一个整数数组 nums ，返回该数组所有可能的子集（幂集）。解集不能包含重复的子集。</p>
<p>示例 1：<br>
输入：nums = [1,2,3]<br>
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p>
<p>示例 2：<br>
输入：nums = [0]<br>
输出：[[],[0]]</p>
<h5 id="q39-组合总和">Q39. 组合总和</h5>
<p><a href="https://leetcode-cn.com/problems/combination-sum/">LeetCode链接</a></p>
<p>给定一个<strong>无重复元素</strong>的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。</p>
<p>说明：<br>
所有数字（包括 target）都是正整数。解集不能包含重复的组合。</p>
<p>示例 1：<br>
输入：candidates = [2,3,6,7], target = 7,<br>
所求解集为：<br>
[<br>
[7],<br>
[2,2,3]<br>
]</p>
<details>
<summary>Answer</summary>
<pre><code> 
private void dfs(int[] candidates, int begin, int len, int target, Deque<Integer> path, List<List<Integer>> res) {
  if (target < 0) {
    return;
  }
  if (target == 0) {
    res.add(new ArrayList<>(path));
    return;
  }
  for (int i = begin; i < len; i++) {
    path.addLast(candidates[i]);
    dfs(candidates, i, len, target - candidates[i], path, res);    
    path.removeLast();
  }
}
</code></pre>
</details>
<h5 id="q40-组合总和-ii">Q40. 组合总和 II</h5>
<p><a href="https://leetcode-cn.com/problems/combination-sum-ii/">LeetCode链接</a></p>
<p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的每个数字在每个组合中只能使用一次。</p>
<p>说明：<br>
所有数字（包括目标数）都是正整数。解集不能包含重复的组合。</p>
<p>示例 1:<br>
输入: candidates = [10,1,2,7,6,1,5], target = 8,<br>
所求解集为:<br>
[<br>
[1, 7],<br>
[1, 2, 5],<br>
[2, 6],<br>
[1, 1, 6]<br>
]</p>
<hr>
<h3 id="二分法">二分法</h3>
<p>结论：有序查找中特别管用，问题是你得判断出这是一种“有序查找”问题，比如Q69平方根问题；Q29、Q50可以算作一道题，采用了二分的思想，但不算是“有序查找”问题。二分的思想简单来讲可以理解为折叠的思想，典型题目是Q50快速幂算法。</p>
<p><a href="https://leetcode-cn.com/problems/divide-two-integers/">Q29 两数相除</a></p>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="int类型溢出相关问题">int类型溢出相关问题</h3>
<p><a href="https://leetcode-cn.com/problems/divide-two-integers/">Q29 两数相除</a></p>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="快速幂算法">快速幂算法</h3>
<p><a href="https://leetcode-cn.com/problems/powx-n/">Q50 Pow(x, n)</a></p>
<hr>
<h3 id="牛顿法">牛顿法</h3>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">Q69 x 的平方根</a></p>
<hr>
<h3 id="动态规划">动态规划</h3>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
<hr>
<h3 id="分治">分治</h3>
<p><a href="https://leetcode-cn.com/problems/maximum-subarray/">Q53 最大子序和</a></p>
<hr>
<h1 id="字符串">字符串</h1>
<h2 id="双指针-3">双指针</h2>
<h4 id="数字相加-相乘">数字相加、相乘</h4>
<h5 id="q43-字符串相乘">Q43. 字符串相乘</h5>
<p><a href="https://leetcode-cn.com/problems/multiply-strings/">LeetCode链接</a></p>
<p>给定两个以字符串形式表示的非负整数num1和num2，返回num1和num2的乘积，它们的乘积也表示为字符串形式。</p>
<p>示例 1:<br>
输入: num1 = &quot;2&quot;, num2 = &quot;3&quot;<br>
输出: &quot;6&quot;</p>
<p>示例 2:<br>
输入: num1 = &quot;123&quot;, num2 = &quot;456&quot;<br>
输出: &quot;56088&quot;</p>
<h5 id="q415-字符串相加">Q415. 字符串相加</h5>
<p><a href="https://leetcode-cn.com/problems/add-strings/">LeetCode链接</a></p>
<p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p>
<hr>
<h1 id="哈希表">哈希表</h1>
<p><strong>关于哈希表的说明</strong>：</p>
<ol>
<li>哈希碰撞</li>
</ol>
<pre><code class="language-java">HashMap&lt;Character, Integer&gt; map1 = new HashMap&lt;&gt;();
map1.put('a',2);
map1.put('c',1); //hashcode()=197
HashMap&lt;Character, Integer&gt; map2 = new HashMap&lt;&gt;();
map1.put('b',2);
map1.put('d',1); //hashcode()=197
</code></pre>
<ol start="2">
<li>哈希表添加逻辑</li>
</ol>
<ul>
<li>计算欲加入元素的hashcode，并计算对应的索引值；若索引值对应的数组位置为空，则加入；若存在数据，则进行下一步。<br>
<mark>注意</mark>：索引相同，说明哈希值有相同的可能；对于重写过的hashcode()方法，哈希值相同，不一定说明元素内容完全相同，这是哈希碰撞；对于没有重写过的hashcode()方法，一般情况下不会出现哈希值相同的情况；equals()相同，不一定说明内容相同，因为equals()方法不一定重写，但一定说明地址相同；对于重写过的equals()方法，equals相同，哈希值也相同。</li>
<li>若存在哈希值相同/且地址值相同或equals()相同，则判定为相同的key值，可以进行val值的更新。<br>
<mark>注意</mark>：
<ol>
<li>哈希值相同但内容不同，但地址相同，判定为同一个元素；</li>
<li>哈希值相同但内容不同，且地址不同，且equals()方法重写过，不判定为同一个元素；</li>
<li>地址相同但哈希值不同，不判定为同一个元素，此时哈希表中会存放两个同一地址的不同元素。</li>
</ol>
</li>
</ul>
<ol start="3">
<li>哈希值的逻辑<br>
对于内容不同的元素，哈希值尽可能不同。<br>
那么，这里会有一个“相同”和“不同”的理解，通过这个理解，可以手写哈希表，筛选出你定义的“相同”的元素。例如：排列顺序不同但组成字符相同的字符串认定为相同的元素。</li>
</ol>
<h4 id="哈希值定义">哈希值定义</h4>
<h5 id="q49-字母异位词分组">Q49. 字母异位词分组</h5>
<p><a href="https://leetcode-cn.com/problems/group-anagrams/">LeetCode链接</a></p>
<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>
<p>示例:<br>
输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]<br>
输出:<br>
[<br>
[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],<br>
[&quot;nat&quot;,&quot;tan&quot;],<br>
[&quot;bat&quot;]<br>
]</p>
<h4 id="哈希表应用">哈希表应用</h4>
<h5 id="q76-最小覆盖子串">Q76. 最小覆盖子串</h5>
<p><a href="https://leetcode-cn.com/problems/minimum-window-substring/">LeetCode链接</a></p>
<p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &quot;&quot; 。</p>
<p>注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。</p>
<p>示例 1：<br>
输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;<br>
输出：&quot;BANC&quot;</p>
<p>示例 2：<br>
输入：s = &quot;a&quot;, t = &quot;a&quot;<br>
输出：&quot;a&quot;</p>
<hr>
<h1 id="树">树</h1>
<h2 id="指针递归栈">指针/递归/栈</h2>
<h3 id="树的遍历">树的遍历</h3>
<h4 id="深度优先搜索dfs">深度优先搜索（DFS）</h4>
<h5 id="q94-二叉树的中序遍历">Q94. 二叉树的中序遍历</h5>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">LeetCode链接</a></p>
<p>两种方式解答</p>
<ul>
<li>递归方式</li>
<li>迭代方式</li>
<li>Morris遍历方式</li>
</ul>
<p>迭代方式：</p>
<ol>
<li>中序遍历</li>
</ol>
<details>
<summary>Answer</summary>
<pre><code> 
Stack<TreeNode> stk = new Stack<>();
while(root != null || ! stk.isEmpty()) {
	while(root != null) {
		stk.push(root);
		root = root.left;
	}
	//跳出while循环，root == null
	root = stk.pop();
	root.val.sout();
	root = root.left;
}
</pre></code> 
</details>
<ol start="2">
<li>前序遍历</li>
</ol>
<details>
<summary>Answer</summary>
<pre><code> 
Stack<TreeNode> stk = new Stack<>();
while(root != null || ! stk.isEmpty()) {
	while(root != null) {
		root.val.sout();
		stk.push(root);
		root = root.left;
	}
	root = stk.pop();
	root = root.right;
}
</pre></code> 
</details>
<ol start="3">
<li>后序遍历</li>
</ol>
<details>
<summary>Answer</summary>
<pre><code> 
Deque<TreeNode> stk = new LinkedList<>();
Deque<TreeNode> stk2 = new LinkedList<>();
while(root != null || ! stk.isEmpty()) {
	while(root != null) {
		stk.push(root);
		root = root.left;
	}
	root = stk.peek();
	if(stk2.isEmpty() || !stk.isEmpty() && stk2.peek != root) {
		stk2.push(root);
		root = root.right;
	}else {
		root.val.sout();
		stk.pop();
		stk2.pop();
		root = null;
	}
}
</pre></code> 
</details>
<p>Morris遍历：</p>
<ol>
<li>中序遍历</li>
</ol>
<details>
<summary>Answer</summary>
<pre><code> 
Stack<TreeNode> stk = new Stack<>();
TreeNode pre = null;
List<Integer> returnList = new ArrayList<>();
  while(root != null) {
    if(root.left != null) {
      pre = root.left;
      while(pre.right != null && pre.right != root) pre = pre.right;
      if(pre.right == null) {
        pre.right = root;
        root = root.left;
      }
      else {
        returnList.add(root.val);
        pre.right = null;
        root = root.right;
      }
    }else {
      returnList.add(root.val);
      root = root.right;
    }
  }
return returnList;
</pre></code> 
</details>
<h5 id="q98-验证二叉搜索树">Q98. 验证二叉搜索树</h5>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">LeetCode链接</a></p>
<p><strong>注意二叉搜索树（BST）的定义</strong>：<br>
给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p>
<p>假设一个二叉搜索树具有如下特征：<br>
节点的<strong>左子树只包含</strong>小于当前节点的数。<br>
节点的<strong>右子树只包含</strong>大于当前节点的数。<br>
所有左子树和右子树自身必须也是二叉搜索树。<br>
<mark>注意</mark>：相等也是不成立的。</p>
<hr>
<h4 id="广度优先搜索bfs">广度优先搜索（BFS）</h4>
<h5 id="q102-二叉树的层序遍历">Q102. 二叉树的层序遍历</h5>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">LeetCode链接</a></p>
<p>给你一个二叉树，请你返回其按<strong>层序遍历</strong>得到的节点值。（即逐层地，从左到右访问所有节点）</p>
<p>示例：<br>
二叉树：[3,9,20,null,null,15,7],<br>
3<br>
/ <br>
9  20<br>
/  <br>
15   7<br>
返回其层序遍历结果：[[3],[9,20],[15,7]]</p>
<p>这道题也可以通过DFS前序遍历解决</p>
<hr>
<h3 id="其他">其他</h3>
<h5 id="q100-相同的树">Q100. 相同的树</h5>
<p><a href="https://leetcode-cn.com/problems/same-tree/">LeetCode链接</a></p>
<p>给定两个二叉树，编写一个函数来检验它们是否相同。<br>
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
<h5 id="q101-对称二叉树">Q101. 对称二叉树</h5>
<p><a href="https://leetcode-cn.com/problems/symmetric-tree/">LeetCode链接</a></p>
<p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。<br>
1<br>
/ <br>
2    2<br>
/ \    / <br>
3  4   4  3</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Servlet-Notes]]></title>
        <id>https://zacharyzekaichen.github.io/servlet-notes/</id>
        <link href="https://zacharyzekaichen.github.io/servlet-notes/">
        </link>
        <updated>2020-12-02T14:43:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">/**
 * service方法专门用来处理请求和响应。
 * Servlet接口实现
 */
@Override
public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {
	System.out.println(&quot;Hello Servlet 被访问了。&quot;);
}        

//分发处理
//向下转型从而能使用getMethod方法
HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;
//获取方法String
String method = httpServletRequest.getMethod();
//分发操作
if(&quot;GET&quot;.equals(method)){
	System.out.println(method);
}else if(&quot;POST&quot;.equals(method)){
	System.out.println(method);
}

//通过继承方式实现Servlet程序
//throws异常没加进去
public class HelloServlet implements HttpServlet{
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp){
		super.doGet(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp){
		super.doPost(req, resp);
	}
}

//获取ServletConfig对象
getServletConfig()
//获取ServletContext对象
ServletContext servletContext= getServletConfig().getServletContext();
//获取context-parameter
servletContext.getInitParameter(&quot;username&quot;);
//获取当前工程路径
servletContext.getContextPath();
//获取当前工程物理上的绝对路径
servletContext.getRealPath(&quot;/&quot;);

//HttpServletRequest类对象的常用方法
//HttpServletRequest req
//获取请求的统一资源路径
req.getRequestURI();
//获取请求的统一资源定位符
req.getRequestURL();
//获取客户端IP
req.getRemoteHost();
//获取请求头
req.getHeader(String key);
//获取参数
req.getParameter(String name);
req.getParameterValues(String name);
//设置字符集，注意这个设置要在最开始的地方使用
req.setCharacterEncoding(&quot;UTF-8&quot;);
</code></pre>
<p><strong>请求转发的操作流程</strong></p>
<pre><code class="language-java">//对于Servlet1而言
String username = req.getParameter(&quot;username&quot;);
username.sout;
//设置域参数
request.setAttribute(&quot;key1&quot;,&quot;value1&quot;);
//获取转发路径并转发
RequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/contextServlet2&quot;);
requestDispatcher.forward(request,response);
//对于Servlet2而言
//便可以获得request和response的信息，同时也可以获得域参数的信息。
</code></pre>
<p><strong>往客户端回传数据</strong></p>
<pre><code class="language-java">//会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头。
//此方法需要在获取流之前使用。
response.setContentType(&quot;text/html; charset=UTF-8&quot;);
//获取流
PrintWriter print = response.getWriter();
writer.write(&quot;response content.&quot;);
</code></pre>
<p><strong>请求重定向方法</strong></p>
<pre><code class="language-java">//第一种方法
response.setStatus(302);
response.setHeader(&quot;Location&quot;, &quot;http://localhost:8080&quot;);
//第二种方法（推荐使用）
response.sendRedirect(&quot;http://localhost:8080&quot;)；
</code></pre>
<p><strong>ServletContext类对象的域数据</strong></p>
<pre><code class="language-java">//对于Servlet1而言
ServletContext servletContext = getServletContext();
servletContext.setAttribute(key:&quot;username&quot;, value:&quot;czk&quot;);
String v1 = servletContext.getAttribute(&quot;username&quot;); //&quot;czk&quot;
//对于Servlet2而言
ServletContext servletContext = getServletContext();
String v2 = servletContext.getAttribute(&quot;username&quot;); //&quot;czk&quot;
</code></pre>
<p><strong>HttpServletRequest类对象的域数据</strong><br>
<em>由实验结果可得，只有在一次请求之中，request中的域参数才是共享的，否则不共享。</em></p>
<pre><code class="language-java">//对于Servlet1而言
request.setAttribute(&quot;username&quot;, &quot;czk&quot;);
String v1 = request.getAttribute(&quot;username&quot;); //&quot;czk&quot;
//对于Servlet2而言
request.getAttribute(&quot;username&quot;); //null
</code></pre>
<hr>
<pre><code class="language-html">&lt;head&gt;
	&lt;base href=&quot;http://localhost:8080/01_web/a/b/&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form action=&quot;http://localhost:8080/01_web/hello&quot; method=&quot;get&quot;&gt;
        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br/&gt;
        密码：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br/&gt;
        兴趣爱好：&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;java&quot;&gt;Java&lt;br/&gt;
        &lt;input type=&quot;submit&quot;&gt;
        &lt;a href=&quot;a/b/c.html&quot;&gt;超链接&lt;/a&gt;
    &lt;/form&gt;
&lt;/body&gt;
</code></pre>
<hr>
<pre><code class="language-xml">&lt;!-- servlet标签给Tomcat服务器配置Servlet程序 --&gt;
&lt;servlet&gt;
	&lt;!-- 程序别名 --&gt;
	&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
	&lt;!-- 程序全类名 --&gt;
	&lt;servlet-class&gt;com.chenzk.learn.HelloServlet&lt;/servlet-class&gt;

	&lt;!-- 初始化参数 --&gt;
	&lt;init-param&gt;
		&lt;param-name&gt;username&lt;/param-name&gt;
		&lt;param-value&gt;root&lt;/param-value&gt;
	&lt;/init-param&gt;
&lt;/servlet&gt;

&lt;!-- servlet-mapping标签给servlet程序配置访问地址 --&gt;
&lt;servlet-mapping&gt;
	&lt;!-- 作用：告诉服务器，我当前配置的地址给哪一个Servlet程序使用 --&gt;
	&lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;
	&lt;!--
    		/ 斜杠在服务器解析时，表示地址为 http://ip:port/工程路径 &lt;br/&gt;
    		/hello 表示地址为 http://ip:port/工程路径/hello        &lt;br/&gt;
 	--&gt;
	&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;    
</code></pre>
]]></content>
    </entry>
</feed>